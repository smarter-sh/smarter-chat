/*-----------------------------------------------------------------------------
 Description: This file contains the function that makes the API request to
 the backend. It is called exclusively from chatApp/Component.jsx

 Notes:
  - The backend API is an AWS API Gateway endpoint that is configured to
    call an AWS Lambda function. The Lambda function is written in Python
    and calls the OpenAI API.

  - The backend API is configured to require an API key. The API key is
    passed in the header of the request. In real terms, the api key is
    pointless because it is exposed in the client code. However, it is
    required by the API Gateway configuration.

  - The backend API is configured to allow CORS requests from the client.
    This is necessary because the client and backend are served from
    different domains.

 Returns: the backend API is configured to return a JSON object that substantially
    conforms to the following structure for all 200 responses:
    v0.1.0 - v0.4.0:  ./test/events/openai.response.v0.4.0.json
    v0.5.0:       ./test/events/langchain.response.v0.5.0.json
-----------------------------------------------------------------------------*/
import { getCookie } from "../../cookies.js";

function requestBodyFactory(messages, session_key) {
  const retval = {
    [sessionCookieName]: session_key,
    messages: messages,
  };
  return JSON.stringify(retval);
}

export async function processApiRequest(
  config,
  messages,
  api_url,
  openChatModal,
  csrfCookieName,
  sessionCookieName,
) {
  if (config.debug_mode) {
    console.log("processApiRequest(): config: ", config);
    console.log("processApiRequest(): api_url: ", api_url);
    console.log("processApiRequest(): messages: ", messages);
  }

  // Ensure that csrftoken is not included in the Cookie header.
  const cookiesArray = document.cookie.split(";").filter((cookie) => {
    const trimmedCookie = cookie.trim();
    return !trimmedCookie.startsWith(`${csrfCookieName}=`);
  });
  const cookies = cookiesArray.join("; ");
  const csrftoken = getCookie(csrfCookieName);

  const headers = {
    Accept: "application/json",
    "Content-Type": "application/json",
    "X-CSRFToken": csrftoken,
    Origin: window.location.origin,
    Cookie: cookies,
  };
  const init = {
    method: "POST",
    credentials: "include",
    mode: "cors",
    headers: headers,
    body: requestBodyFactory(messages, config.session_key),
  };
  if (config.debug_mode) {
    console.log("processApiRequest() - api_url:", api_url);
    console.log("processApiRequest() - init:", init);
    console.log("processApiRequest() - config:", config);
    console.log("processApiRequest(): cookiesArray: ", cookiesArray);
    console.log("processApiRequest(): cookies: ", cookies);
    console.log("processApiRequest(): csrftoken: ", csrftoken);
  }

  try {
    const response = await fetch(api_url, init);
    const contentType = response.headers.get("content-type");
    if (contentType && contentType.includes("application/json")) {
      const status = await response.status;
      const response_json = await response.json(); // Convert the ReadableStream to a JSON object
      const response_body = await response_json.data.body; // ditto

      if (config.debug_mode) {
        console.log("processApiRequest(): response status: ", status);
        console.log("processApiRequest(): response: ", response_json);
      }

      if (response.ok) {
        if (config.debug_mode) {
          console.log(
            "processApiRequest(): response_body: ",
            JSON.parse(response_body),
          );
        }
        return JSON.parse(response_body);
      } else {
        /*
          note:
          - the response_body object is not available when the status is 504, because
            these responses are generated exclusively by API Gateway.
          - the response_body object is potentially not available when the status is 500
            depending on whether the 500 response was generated by the Lambda or the API Gateway
          - the response_body object is intended to always be available when the status is 400.
            However, there potentially COULD be a case where the response itself contains message text.
        */
        console.error(
          "processApiRequest(): error: ",
          status,
          response.statusText,
          response_body.message,
        );

        let errTitle = "Error " + status;
        let errMessage =
          response.statusText ||
          response_body.message ||
          "The request was invalid.";

        console.error(errTitle, errMessage);
        openChatModal(errTitle, errMessage);
      }
    } else {
      const errorText = await response.text();
      throw new Error(`Unexpected response format: ${errorText}`);
    }
  } catch (error) {
    openChatModal("Error", error || "An unknown error occurred.");
    return;
  }
}
